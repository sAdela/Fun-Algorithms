/*Challenge
Have the function KaprekarsConstant(num) take the num parameter being passed which will be
a 4-digit number with at least two distinct digits. 
Your program should perform the following routine on the number: 
Arrange the digits in descending order and in ascending order (adding zeroes to fit it to a 4-digit number), 
and subtract the smaller number from the bigger number. 
Then repeat the previous step. Performing this routine will always cause you to reach 
a fixed number: 6174. Then performing the routine on 6174 will always give 
you 6174 (7641 - 1467 = 6174). Your program should return the number of times this 
routine must be performed until 6174 is reached. 
For example: if num is 3524 your program should return 3 because of the following steps: 
(1) 5432 - 2345 = 3087, (2) 8730 - 0378 = 8352, (3) 8532 - 2358 = 6174. 

Hard challenges are worth 15 points and you are not timed for them.

Sample Test Cases
Input:2111

Output:5


Input:9831

Output:7*/

#include <iostream>
#include <string>
using namespace std;

void sort(string& str, bool ascending) {
	bool change = true;
	/*Bubble sort*/
	while (change) {
		change = false;
		for (int i = 0; i < str.length() - 1; i++) {
			if (ascending && str[i] > str[i + 1]) {
				change = true;
				char temp = str[i];
				str[i] = str[i + 1];
				str[i + 1] = temp;
			}
			else if (!ascending && str[i] < str[i+1]) {
				char temp = str[i];
				str[i] = str[i + 1];
				str[i + 1] = temp;
				change = true;
			}
		}
	}
}

int KaprekarsConstant(int num) {
	
	int counter = 0;
	string min, max;
	bool t = true;
	while (num != 6174) {
		min = to_string(num);
		max = to_string(num);

		sort(min, true);
		sort(max, false);

		num = atoi(max.c_str()) - atoi(min.c_str());
		if (num < 10) {
			string n = to_string(num) + "000";
			num = atoi(n.c_str());
		}
		else if (num < 100) {
			string n = to_string(num) + "00";
			num = atoi(n.c_str());
		}
		else if (num < 1000) {
			string n = to_string(num) + "0";
			num = atoi(n.c_str());
		}

		counter++;
	}

	return counter;
}

bool check(int num) {
	string n = to_string(num);
	for (int i = 0; i < 3; i++) 
		if (n[i] != n[i + 1])
			return true;
	return false;
}

void main() {
	int num;
	cin >> num;
	if (!check(num))
		cout << "Numbers must have at least 2 distinct digits!";
	else
		cout << KaprekarsConstant(num);
	system("pause>0");
}

